"""
–ö–æ–Ω—Å–æ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –≤–∞–ª—é—Ç
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    .\—ÅonverterCLI.exe [—Å—É–º–º–∞] [—Ñ–ª–∞–≥–∏]
    .\—ÅonverterCLI.exe [—Ñ–ª–∞–≥–∏] [—Å—É–º–º–∞]

–ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.

–§–ª–∞–≥–∏:
    -r, --reverse        –î–ª—è –æ–±—ã—á–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: RUB -> UAH
    -s, --steam          –†–∞—Å—á–µ—Ç –¥–ª—è Steam (–∏—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞ RUB)
    -sr, --steam-reverse –†–∞—Å—á–µ—Ç –¥–ª—è Steam (–∏—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞ UAH). –í–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º Steam
    -m, --manual-rate    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å UAH/RUB –≤—Ä—É—á–Ω—É—é. –ï—Å–ª–∏ –∫—É—Ä—Å –Ω–µ —É–∫–∞–∑–∞–Ω, –∑–∞–ø—Ä–æ—Å–∏—Ç –≤–≤–æ–¥
    -h, --help           –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
    # 100 UAH -> RUB (–æ–±—ã—á–Ω–∞—è) –∏ 100 UAH -> Steam (—Ñ–ª–∞–≥ -sr)
    .\—ÅonverterCLI.exe 100 -sr

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å 100 –ø–æ –∫—É—Ä—Å—É 2.5, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤—Ä—É—á–Ω—É—é
    .\—ÅonverterCLI.exe -m 2.5

    # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫—É—Ä—Å–∞
   .\—ÅonverterCLI.exe 100 -m
"""

WHITE = "\033[0m"
RED = "\033[31m"
YELLOW = "\033[33m"
MAGENTA = "\033[35m"
BLUE = "\033[34m"


try:
    import sys
    import argparse
    from core import CurrencyConverterCore
    import os
except KeyboardInterrupt:
    print(f"{MAGENTA}–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    sys.exit()

CONSOLE_COMMAND_CLEAR = 'cls' if os.name == 'nt' else 'clear'


def clear_screen() -> None:
    os.system(CONSOLE_COMMAND_CLEAR)


def print_help():
    print(__doc__.strip())


def get_numeric_input(prompt: str) -> float:
    while True:
        try:
            input_text = input(prompt + ": ").strip().replace(',', '.')
            if not input_text:
                print(f"{YELLOW}–ü—É—Å—Ç–æ–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑{WHITE}")
                continue
            value = float(input_text)
            if value <= 0:
                print(f"{YELLOW}–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è{WHITE}")
                continue
            return value
        except ValueError:
            print(f"{YELLOW}–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ{WHITE}")
        except (EOFError, KeyboardInterrupt):
            print(f"{MAGENTA}\n–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
            sys.exit(0)


def format_currency_result(result: dict) -> str:
    rate_info = f"1 UAH = {round(result['rate'], 3)} RUB"
    return f"{result['amount']} {result['from_currency']} = {result['result']} {result['to_currency']} ({rate_info})"


def format_steam_result(result: dict) -> str:
    if result['from_currency'] == 'UAH':
        return f"{result['amount']} UAH ({result['rub_amount']} RUB) ‚áí {result['steam_result']} Steam RUB | –ö–æ–º–∏—Å—Å–∏—è: {result['commission_amount']} RUB ({result['commission']}%)"
    else:
        return f"{result['amount']} RUB ‚áí {result['steam_result']} Steam RUB | –ö–æ–º–∏—Å—Å–∏—è: {result['commission_amount']} RUB ({result['commission']}%)"


def wait_for_exit():
    try:
        input(f"\n{BLUE}–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏...{WHITE}")
    except (EOFError, KeyboardInterrupt):
        pass


def main():
    parser = argparse.ArgumentParser(
        description="–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç UAH/RUB —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Steam",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        add_help=False,
    )
    parser.add_argument(
        'amount',
        nargs='?',
        default=None,
        type=float,
        help='–°—É–º–º–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏',
    )
    parser.add_argument(
        '-r',
        '--reverse',
        action='store_true',
        help='–î–ª—è –æ–±—ã—á–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: –∏—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞ RUB',
    )
    parser.add_argument(
        '-s',
        '--steam',
        action='store_true',
        help='–†–∞—Å—á–µ—Ç –¥–ª—è Steam (–∏—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞ RUB)',
    )
    parser.add_argument(
        '-sr',
        '--steam-reverse',
        action='store_true',
        help='–†–∞—Å—á–µ—Ç –¥–ª—è Steam (–∏—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞ UAH). –≠—Ç–æ—Ç —Ñ–ª–∞–≥ –≤–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º Steam',
    )

    parser.add_argument(
        '-m',
        '--manual-rate',
        nargs='?',
        const='prompt_user',
        default=None,
        help='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å UAH/RUB –≤—Ä—É—á–Ω—É—é. –ï—Å–ª–∏ –∫—É—Ä—Å –Ω–µ —É–∫–∞–∑–∞–Ω, –∑–∞–ø—Ä–æ—Å–∏—Ç –≤–≤–æ–¥',
    )

    parser.add_argument(
        '-h', '--help', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É'
    )

    args = parser.parse_args()

    if args.help:
        print_help()
        wait_for_exit()
        return

    print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞...")
    converter = CurrencyConverterCore()
    rate_was_set_manually = False

    if args.manual_rate is not None:
        rate_to_set = None
        if args.manual_rate == 'prompt_user':
            print("\n‚úçÔ∏è –ó–∞–ø—Ä–æ—à–µ–Ω —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –∫—É—Ä—Å–∞")
            rate_to_set = get_numeric_input("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å (UAH –∫ RUB)")
        else:
            try:
                rate_to_set = float(args.manual_rate)
                if rate_to_set <= 0:
                    print(
                        f"{YELLOW}‚ùå –û—à–∏–±–∫–∞: –ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º{WHITE}"
                    )
                    wait_for_exit()
                    return
            except ValueError:
                print(
                    f"{RED}‚ùå –û—à–∏–±–∫–∞: {YELLOW}'{args.manual_rate}'{RED} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —á–∏—Å–ª–æ–º –¥–ª—è –∫—É—Ä—Å–∞{WHITE}"
                )
                wait_for_exit()
                return

        if rate_to_set is not None:
            converter.set_manual_rate(rate_to_set)
            rate_was_set_manually = True

    if not rate_was_set_manually:
        if not converter.initialize():
            print(f"{RED}‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞{RED}")
            wait_for_exit()
            return

        status = converter.get_status_info()
        if status['rate_source'] == 'default':
            print("\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å: –Ω–µ—Ç —Å–µ—Ç–∏ –∏ –∫—ç—à–∞")
            print(
                f"   –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—É—Ä—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {status['current_rate']}"
            )
            try:
                choice = (
                    input("   –•–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫—É—Ä—Å –≤—Ä—É—á–Ω—É—é? (y/N): ")
                    .strip()
                    .lower()
                )
                if choice in ('y', 'yes', '–¥', '–¥–∞'):
                    manual_rate = get_numeric_input("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å (UAH –∫ RUB)")
                    converter.set_manual_rate(manual_rate)
            except (EOFError, KeyboardInterrupt):
                print(f"\n{MAGENTA}–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
                sys.exit(0)

    status = converter.get_status_info()
    status_emoji = "üü¢" if status['is_online'] else "üî¥"
    status_text = '–û–Ω–ª–∞–π–Ω' if status['is_online'] else '–û—Ñ–ª–∞–π–Ω'
    details_info = ""
    if status['rate_source'] == 'api':
        details_info = " | –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
    elif status['rate_source'] == 'cache' and status['cache_age']:
        details_info = f" | –ö—ç—à: {status['cache_age']}"
    elif status['rate_source'] == 'manual':
        details_info = " | –†—É—á–Ω–æ–π –≤–≤–æ–¥"
    elif status['rate_source'] == 'default':
        details_info = " | –î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"

    print(f"\n{status_emoji} –°—Ç–∞—Ç—É—Å: {status_text}{details_info}")
    if status['rate_display']:
        print(f"üìà –ö—É—Ä—Å: {status['rate_display']}")
    print()

    amount = args.amount
    if amount is None:
        prompt = (
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö"
            if args.reverse
            else "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –≥—Ä–∏–≤–Ω–∞—Ö"
        )
        amount = get_numeric_input(prompt)

    regular_result = converter.convert_currency(amount, reverse=args.reverse)
    if 'error' in regular_result:
        print(f"{RED}‚ùå {regular_result['error']}{WHITE}")
        wait_for_exit()
        return

    print(f"üí± {format_currency_result(regular_result)}")

    if args.steam or args.steam_reverse:
        steam_result = converter.convert_to_steam(
            amount, from_uah=args.steam_reverse
        )
        if 'error' in steam_result:
            print(
                f"{RED}‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ Steam: {steam_result['error']}{WHITE}"
            )
        else:
            print(f"üéÆ {format_steam_result(steam_result)}")

    wait_for_exit()


if __name__ == "__main__":
    try:
        clear_screen()
        main()
    except KeyboardInterrupt:
        print(f"{MAGENTA}–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        sys.exit()
